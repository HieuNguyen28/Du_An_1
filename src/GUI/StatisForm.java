/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import CustomizeGUI.BlankChart.ChartBar.ModelChart;
import static Controller.Helper.Database.executeQuery;
import com.microsoft.sqlserver.jdbc.SQLServerException;
import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Laxus
 */
public class StatisForm extends javax.swing.JPanel {

    /**
     * Creates new form StaticForm
     */
    public StatisForm() {
        initComponents();
        setOpaque(false);
        init();
        showPieChart();
    }

    private void init() {
        chart.addLegend("Income", new Color(12, 84, 175), new Color(0, 108, 247));
        chart.addLegend("Expense", new Color(54, 4, 143), new Color(104, 49, 200));
        chart.addLegend("Profit", new Color(5, 125, 0), new Color(95, 209, 69));
        try {
            List<ModelChart> data = loadData();
            for (int i = data.size() - 1; i >= 0; i--) {
                chart.addData(data.get(i));
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        chart.start();
        lineChart.addLegend("Income", new Color(12, 84, 175), new Color(0, 108, 247));
        lineChart.addLegend("Expense", new Color(54, 4, 143), new Color(104, 49, 200));
        lineChart.addLegend("Profit", new Color(5, 125, 0), new Color(95, 209, 69));
        try {
            List<ModelChart> data = loadData();
            for (int i = data.size() - 1; i >= 0; i--) {
                lineChart.addData(data.get(i));
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        lineChart.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBorder1 = new CustomizeGUI.Componets.PanelBorder();
        pnlBarChart = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lineChart = new CustomizeGUI.BlankChart.ChartBar.LineChart();
        jPanel3 = new javax.swing.JPanel();
        chart = new CustomizeGUI.BlankChart.ChartBar.Chart();

        panelBorder1.setBackground(new java.awt.Color(255, 255, 255));

        pnlBarChart.setBackground(new java.awt.Color(51, 51, 51));
        pnlBarChart.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lineChart, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lineChart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 909, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addComponent(pnlBarChart, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBarChart, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private CustomizeGUI.BlankChart.ChartBar.Chart chart;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private CustomizeGUI.BlankChart.ChartBar.LineChart lineChart;
    private CustomizeGUI.Componets.PanelBorder panelBorder1;
    private javax.swing.JPanel pnlBarChart;
    // End of variables declaration//GEN-END:variables

    private final String sql = "select FORMAT(ThoiGianMua, 'MM') as m, SUM(TienTruocVoucher) as income, SUM(TienVoucher)"
            + " as expense, SUM(TienSauVoucher) as profit from HoaDon group by FORMAT(ThoiGianMua, 'MM')order by"
            + " FORMAT(ThoiGianMua, 'MM') desc";
    private final String sql1 = "select top 3 HovaTen, TongSoTienDaMua from KhachHang order by TongSoTienDaMua desc";

    private List<ModelChart> loadData() throws SQLServerException {
        List<ModelChart> data = new ArrayList<>();
        try {
            ResultSet rs = null;
            try {
                rs = executeQuery(sql);
                while (rs.next()) {
                    String month = rs.getString(1);
                    double income = rs.getDouble(2);
                    double expense = rs.getDouble(3);
                    double profit = rs.getDouble(4);
                    data.add(new ModelChart(month, new double[]{income, expense, profit}));
                }
            } finally {
                rs.getStatement().getConnection().close();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return data;
    }

    public void showPieChart() {

        //create dataset
        DefaultPieDataset barDataset = new DefaultPieDataset();
        try {
            ResultSet rs = null;
            try {
                rs = executeQuery(sql1);
                while (rs.next()) {
                    String customerName = rs.getString(1);
                    double total = rs.getDouble(2);
                    barDataset.setValue(customerName, total);
                }
            } finally {
                rs.getStatement().getConnection().close();
            }
        } catch (Exception e) {
            System.out.println(e);
        }

        //create chart
        JFreeChart piechart = ChartFactory.createPieChart("Top 3 customer", barDataset, false, true, false);//explain
        PiePlot piePlot = (PiePlot) piechart.getPlot();

        //changing pie chart blocks colors
//        piePlot.setSectionPaint("IPhone 5s", new Color(255, 255, 102));
//        piePlot.setSectionPaint("SamSung Grand", new Color(102, 255, 102));
//        piePlot.setSectionPaint("MotoG", new Color(255, 102, 153));
//        piePlot.setSectionPaint("Nokia Lumia", new Color(0, 204, 204));

        piePlot.setBackgroundPaint(new Color(51, 51, 51));

        //create chartPanel to display chart(graph)
        ChartPanel barChartPanel = new ChartPanel(piechart);
        pnlBarChart.removeAll();
        pnlBarChart.add(barChartPanel, BorderLayout.CENTER);
        pnlBarChart.validate();
        
    }
    
    private List<Object[]> loadDataPieChart() throws SQLServerException {
        List<Object[]> data = new ArrayList<>();
        try {
            ResultSet rs = null;
            try {
                rs = executeQuery(sql1);
                while (rs.next()) {
                    String customerName = rs.getString(1);
                    double total = rs.getDouble(2);
                    data.add(new Object[]{
                        customerName,
                        total
                    });
                }
            } finally {
                rs.getStatement().getConnection().close();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return data;
    }
}
