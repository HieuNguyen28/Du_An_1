/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Helper.CreateExcel;
import Controller.Helper.Image_Auth;
import static Controller.Helper.Image_Auth.USER;
import Controller.Helper.Mgsbox;
import Controller.Helper.ValidateSupport;
import Controller.ModelDAO.CustomerDAO;
import Controller.ModelDAO.MedicineDAO;
import Model.Medicine;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Laxus
 */
public class MedicineForm extends javax.swing.JPanel {

    /**
     * Creates new form Medicine
     */
    public MedicineForm() {
        initComponents();
        EditTable(tblMedicine);
        LoadDataToTable(new MedicineDAO().selectAll());
        loadComboboxUnit();
        loadDataToSort();
        txtPriceSale.setEditable(false);
        lblMedicineImage.setHorizontalAlignment((int) CENTER_ALIGNMENT);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cbbUnit = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblMedicineImage = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMedicine = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtDrugID = new GUI.TextField();
        txtDrugTypeID = new GUI.TextField();
        txtDrugBatch = new GUI.TextField();
        txtProducer = new GUI.TextField();
        txtDrugName = new GUI.TextField();
        txtIgredient = new GUI.TextField();
        txtContent = new GUI.TextField();
        txtUserManual = new GUI.TextField();
        txtPriceSale = new GUI.TextField();
        txtRate = new GUI.TextField();
        txtPriceImport = new GUI.TextField();
        jLabel11 = new javax.swing.JLabel();
        btnCreateExcel = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        txtSearch = new GUI.TextField();
        cboSort = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 51, 255));
        jLabel1.setText("Medicine");

        jLabel2.setText("Drug batch:");

        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("Drug ID:");

        jLabel4.setText("Drug type ID:");

        jLabel5.setText("Igredient:");

        jLabel6.setText("Producer:");

        jLabel7.setText("Drug name:");

        jLabel8.setText("User manual:");

        jLabel9.setText("Content:");

        jLabel10.setText("Unit:");

        cbbUnit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jar", "Blister", "Boxes", "Tablets", " " }));

        jLabel12.setText("Price Sale");

        jLabel13.setText("Rate");

        lblMedicineImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/medicine.png"))); // NOI18N
        lblMedicineImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblMedicineImageMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblMedicineImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblMedicineImage, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );

        jLabel14.setText("Price Import:");

        tblMedicine.setBackground(new java.awt.Color(222, 221, 248));
        tblMedicine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Drug ID", "Drug batch", "Producer", "Drug name", "Igredient", "Content", "Unit", "User manual", "Cost", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMedicine.setFocusable(false);
        tblMedicine.setGridColor(new java.awt.Color(15, 106, 205));
        tblMedicine.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblMedicine.setRowHeight(25);
        tblMedicine.setSelectionBackground(new java.awt.Color(51, 153, 255));
        tblMedicine.setShowVerticalLines(false);
        tblMedicine.getTableHeader().setReorderingAllowed(false);
        tblMedicine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMedicineMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMedicine);

        btnEdit.setBackground(new java.awt.Color(92, 84, 179));
        btnEdit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/edit_32px.png"))); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(92, 84, 179));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/delete_32px.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(92, 84, 179));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/update_32px.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtDrugID.setForeground(new java.awt.Color(255, 0, 51));

        txtRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRateKeyReleased(evt);
            }
        });

        txtPriceImport.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPriceImportKeyReleased(evt);
            }
        });

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search_24px.png"))); // NOI18N

        btnCreateExcel.setBackground(new java.awt.Color(255, 255, 255));
        btnCreateExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/excel.png"))); // NOI18N
        btnCreateExcel.setText("Export to Excel");
        btnCreateExcel.setBorder(null);
        btnCreateExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateExcelActionPerformed(evt);
            }
        });

        btnChange.setBackground(new java.awt.Color(255, 255, 255));
        btnChange.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/night-mode.png"))); // NOI18N
        btnChange.setBorder(null);
        btnChange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChangeMouseClicked(evt);
            }
        });

        txtSearch.setText(" ");
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });

        cboSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None Sort", "Sort NameUnit", "Sort DrugName", "Sort Price", "Sort UserManual", " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtProducer, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtContent, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDrugID, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPriceSale, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDrugTypeID, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDrugName, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cbbUnit, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtRate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtIgredient, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDrugBatch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUserManual, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPriceImport, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnChange, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnCreateExcel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cboSort, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(btnChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDrugID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtProducer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtPriceSale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(txtDrugTypeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDrugBatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(txtDrugName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIgredient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cbbUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtUserManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(txtRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPriceImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreateExcel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblMedicineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMedicineMouseClicked
        // TODO add your handling code here:
        this.index = tblMedicine.rowAtPoint(evt.getPoint());
        if (this.index >= 0) {
            this.edit();
            EditStatus(false);
        }
    }//GEN-LAST:event_tblMedicineMouseClicked

    private void lblMedicineImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMedicineImageMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.selectImage();
        }
    }//GEN-LAST:event_lblMedicineImageMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (Image_Auth.USER.isEpeIsRole()) {
            delete();
        } else {
            Mgsbox.alert(this, "Only manager can delete!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (Image_Auth.USER.isEpeIsRole()) {
            edittManager(true);
        } else {
            editstaff(true);
        }

    }//GEN-LAST:event_btnEditActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (ValidateSupport.isNull(txtDrugID)
                || ValidateSupport.isNull(txtDrugTypeID)
                || ValidateSupport.isNull(txtDrugBatch)
                || ValidateSupport.isNull(txtProducer)
                || ValidateSupport.isNull(txtContent)
                || ValidateSupport.isNull(txtPriceSale)
                || ValidateSupport.isNull(txtDrugName)
                || ValidateSupport.isNull(txtIgredient)
                || ValidateSupport.isNull(txtRate)
                || ValidateSupport.isNull(txtUserManual)
                || ValidateSupport.isNull(txtPriceImport)) {
            Mgsbox.error(this, "Please fill out the form...");
        } else if (!ValidateSupport.checkPrice(txtPriceImport)
                || !ValidateSupport.checkPrice(txtPriceSale)
                || !ValidateSupport.checkPrice(txtRate)) {
            Mgsbox.error(this, "Please fill in the correct format as required !!!");
        } else {
            update();
            EditStatus(false);
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCreateExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateExcelActionPerformed
        // TODO add your handling code here:
        CreateExcel.ExportToExcel(tblMedicine, "Medicine");
    }//GEN-LAST:event_btnCreateExcelActionPerformed

    private void txtRateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRateKeyReleased
        // TODO add your handling code here:
        countPriceSale(Double.parseDouble(txtRate.getText().isEmpty() ? "0" : txtRate.getText()),
                 Double.parseDouble(txtPriceImport.getText().isEmpty() ? "0" : txtPriceImport.getText()));
    }//GEN-LAST:event_txtRateKeyReleased

    private void txtPriceImportKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceImportKeyReleased
        countPriceSale(Double.parseDouble(txtRate.getText().isEmpty() ? "0" : txtRate.getText()),
                 Double.parseDouble(txtPriceImport.getText().isEmpty() ? "0" : txtPriceImport.getText()));
    }//GEN-LAST:event_txtPriceImportKeyReleased

    private void btnChangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            btnChange.setToolTipText("Cick 2 for change Background");
            Controller.Helper.BackgroundC1.ChangeTxt(txtDrugID);
            Controller.Helper.BackgroundC1.ChangeTxt(txtContent);
            Controller.Helper.BackgroundC1.ChangeTxt(txtDrugBatch);
            Controller.Helper.BackgroundC1.ChangeTxt(txtDrugName);
            Controller.Helper.BackgroundC1.ChangeTxt(txtDrugTypeID);
            Controller.Helper.BackgroundC1.ChangeTxt(txtIgredient);
            Controller.Helper.BackgroundC1.ChangeTxt(txtPriceImport);
            Controller.Helper.BackgroundC1.ChangeTxt(txtPriceSale);
            Controller.Helper.BackgroundC1.ChangeTxt(txtProducer);
            Controller.Helper.BackgroundC1.ChangeTxt(txtRate);
            Controller.Helper.BackgroundC1.ChangeTxt(txtUserManual);
            Controller.Helper.BackgroundC1.ChangeTxt(txtSearch);
            Controller.Helper.BackgroundC1.ChangeBtn(btnChange);
        } else if (evt.getClickCount() == 2) {
            btnChange.setToolTipText("Cick 1 for change Background");
            Controller.Helper.BackgroundC2.ChangeTxt(txtDrugID);
            Controller.Helper.BackgroundC2.ChangeTxt(txtContent);
            Controller.Helper.BackgroundC2.ChangeTxt(txtDrugBatch);
            Controller.Helper.BackgroundC2.ChangeTxt(txtDrugName);
            Controller.Helper.BackgroundC2.ChangeTxt(txtDrugTypeID);
            Controller.Helper.BackgroundC2.ChangeTxt(txtIgredient);
            Controller.Helper.BackgroundC2.ChangeTxt(txtPriceImport);
            Controller.Helper.BackgroundC2.ChangeTxt(txtPriceSale);
            Controller.Helper.BackgroundC2.ChangeTxt(txtProducer);
            Controller.Helper.BackgroundC2.ChangeTxt(txtRate);
            Controller.Helper.BackgroundC2.ChangeTxt(txtUserManual);
            Controller.Helper.BackgroundC2.ChangeTxt(txtSearch);
            Controller.Helper.BackgroundC2.ChangeBtn(btnChange);
        }
    }//GEN-LAST:event_btnChangeMouseClicked

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
        search(txtSearch.getText());
    }//GEN-LAST:event_txtSearchKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnCreateExcel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbbUnit;
    private javax.swing.JComboBox<String> cboSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel lblMedicineImage;
    private javax.swing.JTable tblMedicine;
    private GUI.TextField txtContent;
    private GUI.TextField txtDrugBatch;
    private GUI.TextField txtDrugID;
    private GUI.TextField txtDrugName;
    private GUI.TextField txtDrugTypeID;
    private GUI.TextField txtIgredient;
    private GUI.TextField txtPriceImport;
    private GUI.TextField txtPriceSale;
    private GUI.TextField txtProducer;
    private GUI.TextField txtRate;
    private GUI.TextField txtSearch;
    private GUI.TextField txtUserManual;
    // End of variables declaration//GEN-END:variables
    private void EditTable(JTable a) {
        a.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        a.getTableHeader().setOpaque(false);
        a.getTableHeader().setBackground(new Color(32, 136, 203));
        a.getTableHeader().setForeground(new Color(255, 255, 255));
        a.setRowHeight(25);
    }

    MedicineDAO MD = new MedicineDAO();
    JFileChooser fileChooser = new JFileChooser();
    int index = 0;

    private void countPriceSale(double rate, double priceImport) {
        txtPriceSale.setText(priceImport + (rate * priceImport) + "");
    }

    //lấy dữ liệu trên bảng
    private void loadComboboxUnit() {
        DefaultComboBoxModel boxModel = (DefaultComboBoxModel) cbbUnit.getModel();
        boxModel.removeAllElements();
        try {
            new MedicineDAO().selectAll().forEach(mdc -> {
                boxModel.addElement(mdc.getMdcUnit());
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void LoadDataToTable(List<Medicine> listMedicine) {
        DefaultTableModel model = (DefaultTableModel) tblMedicine.getModel();
        model.setRowCount(0);
        try {
             
            listMedicine.forEach(e -> {
                model.addRow(new Object[]{e.getMdcID(),
                    e.getMdcBatchID(),
                    e.getMdcProducerID(),
                    e.getMdcName(),
                    e.getMdcIngredient(),
                    e.getMdcConcentration(),
                    e.getMdcUnit(),
                    e.getMdcUserManual(),
                    e.getMdcRate(),
                    e.getMdcPriceImport()});
            });
        } catch (Exception e) {
            Mgsbox.error(this, "Can't load data........");
        }
    }
    
     public List<Medicine> SortByUnit() {
        List<Medicine> listSort = new MedicineDAO().selectAll();
        Collections.sort(listSort, (Medicine o1, Medicine o2)
                -> o1.getMdcUnit().compareTo(o2.getMdcUnit()));
        LoadDataToTable(listSort);
        return listSort;
    }
     
    public List<Medicine> SortByDrugName() {
         List<Medicine> listSort = new MedicineDAO().selectAll();
        Collections.sort(listSort, (Medicine o1, Medicine o2)
                -> o1.getMdcName().compareTo(o2.getMdcName()));
        LoadDataToTable(listSort);
        return listSort;
    }
    public List<Medicine> SortByUsermanual() {
         List<Medicine> listSort = new MedicineDAO().selectAll();
        Collections.sort(listSort, (Medicine o1, Medicine o2)
                -> o1.getMdcUserManual().compareTo(o2.getMdcUserManual()));
        LoadDataToTable(listSort);
        return listSort;
    }
     public List<Medicine> SortByTotal() {
        List<Medicine> listSort = new MedicineDAO().selectAll();
        Collections.sort(listSort, new Comparator<Medicine>() {
            @Override
            public int compare(Medicine c1, Medicine c2) {
                return Double.compare(c1.getMdcPriceSale(), c2.getMdcPriceSale());
            }
        });
        return listSort;
    }
    private void loadDataToSort() {
        cboSort.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED && cboSort.getSelectedIndex() == 1) {
                    LoadDataToTable(SortByUnit());
                } else if (e.getStateChange() == ItemEvent.SELECTED && cboSort.getSelectedIndex() == 2) {
                     LoadDataToTable(SortByDrugName());
                } else if (e.getStateChange() == ItemEvent.SELECTED && cboSort.getSelectedIndex() == 3) {
                     LoadDataToTable(SortByTotal());
                }else if (e.getStateChange() == ItemEvent.SELECTED && cboSort.getSelectedIndex() > 3) {
                     LoadDataToTable(SortByUsermanual());
                }
                else if (e.getStateChange() == ItemEvent.SELECTED && cboSort.getSelectedIndex() < 1) {
                     LoadDataToTable(new MedicineDAO().selectAll());
                }
            }
        });
    }
    private void edit() {
        // setTrang();
        try {
            String ID = (String) tblMedicine.getValueAt(this.index, 0);
            Medicine model = MD.selectByID(ID);
            if (model != null) {
                this.setModel(model);
                //this.setStatus(false);
            }
        } catch (Exception e) {
            Mgsbox.error(this, "Data Query Error!!!");
        }
    }

    //Edit
    private void update() {
        Medicine model = getModel();
        try {
            MD.update(model);
            this.LoadDataToTable(new MedicineDAO().selectAll());
            Mgsbox.alert(this, "Update successful!");
        } catch (Exception e) {
            Mgsbox.alert(this, "Update failed!");
        }
    }

    //Delete
    private void delete() {
        if (Mgsbox.comfirm(this, "Do you really want to delete this Medicine?")) {
            String MDID = txtDrugID.getText();
            try {
                MD.delete(MDID);
                this.LoadDataToTable(new MedicineDAO().selectAll());
                this.clearForm();
                Mgsbox.alert(this, "Delete successfully!");
            } catch (Exception e) {
                Mgsbox.alert(this, "Delete failed!");
            }
        }
    }

    private void setModel(Medicine model) {
        txtDrugID.setText(model.getMdcID());
        txtDrugTypeID.setText(model.getMdcTypeOfMedicineID());
        txtDrugBatch.setText(model.getMdcBatchID());
        txtProducer.setText(model.getMdcProducerID());
        txtDrugName.setText(model.getMdcName());
        txtIgredient.setText(model.getMdcIngredient());
        txtContent.setText(model.getMdcConcentration());
        cbbUnit.setSelectedItem(model.getMdcUnit());
        txtUserManual.setText(model.getMdcUserManual());
        txtPriceSale.setText(String.valueOf(model.getMdcPriceSale()));
        if (model.getMdcImage() != null) {
            lblMedicineImage.setIcon(Image_Auth.readImage(new File("Image", model.getMdcImage()),
                    lblMedicineImage.getWidth(),
                    lblMedicineImage.getHeight()));
            lblMedicineImage.setToolTipText(model.getMdcImage());
        }
        txtRate.setText(String.format("%.2f", model.getMdcRate()).replace(",", "."));
        txtPriceImport.setText(String.valueOf(model.getMdcPriceImport()));
    }

    private Medicine getModel() {
        Medicine model = new Medicine();
        model.setMdcID(txtDrugID.getText());
        model.setMdcTypeOfMedicineID(txtDrugTypeID.getText());
        model.setMdcBatchID(txtDrugBatch.getText());
        model.setMdcProducerID(txtProducer.getText());
        model.setMdcName(txtDrugName.getText());
        model.setMdcIngredient(txtIgredient.getText());
        model.setMdcConcentration(txtContent.getText());
        model.setMdcUnit((String) cbbUnit.getSelectedItem());
        model.setMdcUserManual(txtUserManual.getText());
        model.setMdcPriceSale(Double.parseDouble(txtPriceSale.getText()));
        model.setMdcRate(Double.parseDouble(txtRate.getText()));
        model.setMdcPriceImport(Double.parseDouble(txtPriceImport.getText()));
        model.setMdcImage(lblMedicineImage.getToolTipText());
        return model;
    }

    void selectImage() {
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { //nếu người dùng đã chọn đc file
            File file = fileChooser.getSelectedFile();    //lấy file người dùng chọn
            if (Image_Auth.saveImage(file)) {  //sao chép file đã chọn thư mục logos
                // Hiển thị hình lên form
                lblMedicineImage.setIcon(Image_Auth.readImage(file, lblMedicineImage.getWidth(), lblMedicineImage.getHeight())); //file.getName(); lấy tên của file
                //ImageIcon readLogo(String tenFile) đọc file trong thư mục logos theo tên file trả về ImageIcon
                //void setIcon(ImageIcon icon) set Icon cho lbl
                lblMedicineImage.setToolTipText(file.getName());
            }
        }
    }

    //New
    private void clearForm() {
        final String a = "";
        txtDrugTypeID.setText(a);
        txtDrugID.setText(a);
        txtDrugName.setText(a);
        txtDrugBatch.setText(a);
        txtProducer.setText(a);
        txtIgredient.setText(a);
        txtContent.setText(a);
        txtUserManual.setText(a);
        txtPriceSale.setText(a);
        txtRate.setText(a);
        txtPriceImport.setText(a);
        cbbUnit.setSelectedIndex(index = 0);
    }

    //Search
    public void search(String text) {
        DefaultTableModel model = (DefaultTableModel) tblMedicine.getModel();
        TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>(model);
        tblMedicine.setRowSorter(rowSorter);
        rowSorter.setRowFilter(RowFilter.regexFilter(text));
    }

    public void EditStatus(boolean b) {
        txtDrugID.setEditable(b);
        txtDrugTypeID.setEditable(b);
        txtProducer.setEditable(b);
        txtDrugBatch.setEditable(b);
        txtContent.setEditable(b);
        txtDrugName.setEditable(b);
        txtIgredient.setEditable(b);
        txtPriceImport.setEditable(b);
        txtRate.setEditable(b);
        txtUserManual.setEditable(b);
        btnUpdate.setEnabled(b);
        btnEdit.setEnabled(!b);
    }

    public void edittManager(boolean b) {
        txtDrugID.setEditable(!b);
        txtDrugTypeID.setEditable(!b);
        txtProducer.setEditable(!b);
        txtDrugBatch.setEditable(!b);
        txtContent.setEditable(b);
        txtPriceSale.setEditable(!b);
        txtDrugName.setEditable(b);
        txtIgredient.setEditable(b);
        txtPriceImport.setEditable(b);
        txtRate.setEditable(b);
        txtUserManual.setEditable(b);

        btnUpdate.setEnabled(b);
        btnDelete.setEnabled(b);
        btnEdit.setEnabled(!b);
    }

    public boolean checkRole(JTextField txt) {
        Medicine md = this.MD.selectByID(txt.getText());
        if (md.getMdcID().equals(USER.isEpeIsRole())) {
            Mgsbox.alert(this, "You can not update yourself.");
            return false;
        } else {
            return true;
        }
    }

    public void editstaff(boolean b) {
        txtDrugID.setEditable(!b);
        txtDrugTypeID.setEditable(!b);
        txtProducer.setEditable(!b);
        txtDrugBatch.setEditable(!b);
        txtContent.setEditable(b);
        txtPriceSale.setEditable(!b);
        txtDrugName.setEditable(b);
        txtIgredient.setEditable(b);
        txtPriceImport.setEditable(b);
        txtRate.setEditable(!b);
        txtUserManual.setEditable(b);

        btnUpdate.setEnabled(b);
        btnDelete.setEnabled(b);
        btnEdit.setEnabled(!b);
    }
}
