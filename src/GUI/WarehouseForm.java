/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Helper.CreateExcel;
import Controller.Helper.DateSupport;
import Controller.Helper.Image_Auth;
import Controller.Helper.Mgsbox;
import Controller.Helper.ValidateSupport;
import Controller.ModelDAO.MedicineDAO;
import Controller.ModelDAO.ProducerDAO;
import Controller.ModelDAO.TypeOfMedicineDAO;
import Controller.ModelDAO.WareHouseDAO;
import Model.Medicine;
import Model.Producer;
import Model.TypeOfMedicine;
import Model.WareHouse;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Laxus
 */
public class WarehouseForm extends javax.swing.JPanel {

    /**
     * Creates new form Warehouse1
     */
    public WarehouseForm() {
        initComponents();
        EditTable(tblWarehouse);
        loadDataToTable();
        loadComboboxTypeOfMedicine();
        loadComboboxNameOfTOM();
        loadComboboxProducer();
        editableFormMedicine(false);
        txtPriceSale.setEditable(false);
        lblOk.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupPrescription = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txpMedicineIngre = new javax.swing.JTextPane();
        lblMedicineConcen = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txpMedicineConcen = new javax.swing.JTextPane();
        lblUnit = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblTypeOfMedicineID = new javax.swing.JLabel();
        lblBatchID = new javax.swing.JLabel();
        txtBatchID = new javax.swing.JTextField();
        cboTypeOfMedicineID = new javax.swing.JComboBox<>();
        lblDistributor = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        lblRemainingAmout = new javax.swing.JLabel();
        txtRemainingAmout = new javax.swing.JTextField();
        lblDateImport = new javax.swing.JLabel();
        jdcDateImport = new com.toedter.calendar.JDateChooser();
        lblNameOfTOM = new javax.swing.JLabel();
        lblPrecription = new javax.swing.JLabel();
        lblManufacture = new javax.swing.JLabel();
        rdoTruePre = new javax.swing.JRadioButton();
        jdcManufactureDate = new com.toedter.calendar.JDateChooser();
        rdoFalsePre = new javax.swing.JRadioButton();
        lblExpirationDate = new javax.swing.JLabel();
        jdcExpirationDate = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txpBatchNote = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblWarehouse = new javax.swing.JTable();
        btnImport = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lblMedicineID = new javax.swing.JLabel();
        cboMedicineID = new javax.swing.JComboBox<>();
        lblProducerID = new javax.swing.JLabel();
        lblMedicineName = new javax.swing.JLabel();
        lblMedicineIngre = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        jSeparator10 = new javax.swing.JSeparator();
        btnRefesh = new javax.swing.JButton();
        txtDistributor = new GUI.TextField();
        cboNameOfTOM = new javax.swing.JComboBox<>();
        btnChange = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtPriceSale = new GUI.TextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        txpUsermanual = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        txtMedicineID = new GUI.TextField();
        jLabel5 = new javax.swing.JLabel();
        txtRate = new GUI.TextField();
        txtSearch = new GUI.TextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        lblOk = new javax.swing.JLabel();
        cboProducer = new javax.swing.JComboBox<>();
        txtMedicineName = new GUI.TextField();
        txtPrice = new GUI.TextField();
        txtUnit = new GUI.TextField();
        btnCreateExcel = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 51, 255));
        jLabel1.setText("Warehouse");

        jScrollPane4.setToolTipText("");

        txpMedicineIngre.setEditable(false);
        txpMedicineIngre.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jScrollPane4.setViewportView(txpMedicineIngre);

        lblMedicineConcen.setText("Medicine's Concentration:");

        txpMedicineConcen.setEditable(false);
        txpMedicineConcen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jScrollPane5.setViewportView(txpMedicineConcen);

        lblUnit.setText("Unit:");

        lblPrice.setText("Price:");

        lblTypeOfMedicineID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTypeOfMedicineID.setText("Type Of Medicine ID:");

        lblBatchID.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        lblBatchID.setForeground(new java.awt.Color(255, 51, 51));
        lblBatchID.setText("Batch ID:");

        txtBatchID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cboTypeOfMedicineID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblDistributor.setText("Distributor:");

        lblQuantity.setText("Quantity:");

        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtQuantity.setBorder(null);
        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantityKeyReleased(evt);
            }
        });

        lblRemainingAmout.setText("Remaining Amout:");

        txtRemainingAmout.setEditable(false);
        txtRemainingAmout.setBackground(new java.awt.Color(255, 255, 255));
        txtRemainingAmout.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtRemainingAmout.setBorder(null);

        lblDateImport.setText("Import Date:");

        jdcDateImport.setDateFormatString("yyyy-MM-dd\n");

        lblNameOfTOM.setText("Name of TOM:");

        lblPrecription.setText("Precription:");

        lblManufacture.setText("Manufacture Date:");

        rdoTruePre.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupPrescription.add(rdoTruePre);
        rdoTruePre.setText("Yes");

        jdcManufactureDate.setDate(new java.util.Date(1637055667000L));
        jdcManufactureDate.setDateFormatString("yyyy-MM-dd");

        rdoFalsePre.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupPrescription.add(rdoFalsePre);
        rdoFalsePre.setText("No");
        rdoFalsePre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoFalsePreActionPerformed(evt);
            }
        });

        lblExpirationDate.setText("Expiration Date:");

        jdcExpirationDate.setDateFormatString("yyyy-MM-dd");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Note");

        txpBatchNote.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txpBatchNote.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane6.setViewportView(txpBatchNote);

        tblWarehouse.setBackground(new java.awt.Color(222, 221, 248));
        tblWarehouse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "BatchID", "Employee ID", "Distributor", "Date Import", "Manufacture Date", "Expiration Date", "Quantity", "Remaning Amout", "Note"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblWarehouse.setFocusable(false);
        tblWarehouse.setGridColor(new java.awt.Color(15, 106, 205));
        tblWarehouse.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblWarehouse.setRowHeight(25);
        tblWarehouse.setSelectionBackground(new java.awt.Color(51, 153, 255));
        tblWarehouse.setShowGrid(false);
        tblWarehouse.getTableHeader().setReorderingAllowed(false);
        tblWarehouse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblWarehouseMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblWarehouse);

        btnImport.setBackground(new java.awt.Color(0, 153, 255));
        btnImport.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnImport.setForeground(new java.awt.Color(255, 255, 255));
        btnImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/import.png"))); // NOI18N
        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        lblMedicineID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMedicineID.setText("Medicine ID:");

        cboMedicineID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblProducerID.setText("Producer ID:");

        lblMedicineName.setText("Medicide's name:");

        lblMedicineIngre.setText("Medicine's Ingredient:");

        btnRefesh.setBackground(new java.awt.Color(0, 153, 255));
        btnRefesh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefesh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefesh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/import.png"))); // NOI18N
        btnRefesh.setText("Refesh");
        btnRefesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefeshActionPerformed(evt);
            }
        });

        txtDistributor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cboNameOfTOM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboNameOfTOM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboNameOfTOMMouseClicked(evt);
            }
        });

        btnChange.setBackground(new java.awt.Color(255, 255, 255));
        btnChange.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/night-mode.png"))); // NOI18N
        btnChange.setBorder(null);
        btnChange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChangeMouseClicked(evt);
            }
        });

        jLabel2.setText("PriceSale:");

        txtPriceSale.setText(" ");
        txtPriceSale.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPriceSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceSaleActionPerformed(evt);
            }
        });

        jScrollPane7.setViewportView(txpUsermanual);

        jLabel4.setText("User manual:");

        txtMedicineID.setText(" ");
        txtMedicineID.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtMedicineID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMedicineID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedicineIDActionPerformed(evt);
            }
        });

        jLabel5.setText("Rate:");

        txtRate.setText(" ");
        txtRate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRateKeyReleased(evt);
            }
        });

        txtSearch.setText(" ");
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search_24px.png"))); // NOI18N
        jLabel6.setText(" ");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/clear_16px.png"))); // NOI18N
        jLabel7.setText(" ");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        lblImage.setForeground(new java.awt.Color(255, 0, 0));
        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/add-button.png"))); // NOI18N
        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImageMouseClicked(evt);
            }
        });

        lblOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/ok_16px.png"))); // NOI18N
        lblOk.setText(" ");
        lblOk.setToolTipText("");

        cboProducer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtMedicineName.setText(" ");

        txtPrice.setText(" ");
        txtPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPriceKeyReleased(evt);
            }
        });

        txtUnit.setText(" ");

        btnCreateExcel.setBackground(new java.awt.Color(255, 255, 255));
        btnCreateExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/excel.png"))); // NOI18N
        btnCreateExcel.setText("Export to Excel");
        btnCreateExcel.setBorder(null);
        btnCreateExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblTypeOfMedicineID)
                .addGap(4, 4, 4)
                .addComponent(cboTypeOfMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblNameOfTOM)
                .addGap(18, 18, 18)
                .addComponent(cboNameOfTOM, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(lblPrecription)
                .addGap(14, 14, 14)
                .addComponent(rdoTruePre, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(rdoFalsePre, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnChange))
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblMedicineID)
                .addGap(4, 4, 4)
                .addComponent(cboMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(lblProducerID)
                .addGap(4, 4, 4)
                .addComponent(cboProducer, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(lblMedicineName)
                .addGap(4, 4, 4)
                .addComponent(txtMedicineName, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel7))
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(txtMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(lblBatchID)
                .addGap(10, 10, 10)
                .addComponent(txtBatchID, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(lblDistributor)
                .addGap(18, 18, 18)
                .addComponent(txtDistributor, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(lblQuantity)
                .addGap(18, 18, 18)
                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(lblRemainingAmout)
                .addGap(21, 21, 21)
                .addComponent(txtRemainingAmout, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(438, 438, 438)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125)
                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(lblDateImport)
                .addGap(4, 4, 4)
                .addComponent(jdcDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(lblManufacture)
                .addGap(4, 4, 4)
                .addComponent(jdcManufactureDate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(lblExpirationDate)
                .addGap(10, 10, 10)
                .addComponent(jdcExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(239, 239, 239)
                .addComponent(jLabel6)
                .addGap(4, 4, 4)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(btnCreateExcel)
                .addGap(557, 557, 557)
                .addComponent(btnRefesh)
                .addGap(9, 9, 9)
                .addComponent(btnImport))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(lblPrice)
                        .addGap(10, 10, 10)
                        .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(lblUnit)
                        .addGap(4, 4, 4)
                        .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(lblMedicineIngre)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(lblMedicineConcen)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPriceSale, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(4, 4, 4)
                        .addComponent(txtRate, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(lblImage)
                        .addGap(6, 6, 6)
                        .addComponent(lblOk)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblTypeOfMedicineID))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(cboTypeOfMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblNameOfTOM))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(cboNameOfTOM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(lblPrecription))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(rdoTruePre))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(rdoFalsePre))
                    .addComponent(btnChange))
                .addGap(31, 31, 31)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(lblMedicineID))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(cboMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(lblProducerID))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(cboProducer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(lblMedicineName))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(txtMedicineName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7))
                .addGap(11, 11, 11)
                .addComponent(txtMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(lblUnit))
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblMedicineIngre))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMedicineConcen)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)))
                        .addGap(11, 11, 11))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblImage)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(lblOk))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(jLabel5))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(txtRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(jLabel4))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(15, 15, 15)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(28, 28, 28)
                                    .addComponent(txtPriceSale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(12, 12, 12)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lblBatchID))
                    .addComponent(txtBatchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblDistributor))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtDistributor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lblQuantity))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lblRemainingAmout))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtRemainingAmout, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDateImport)
                    .addComponent(jdcDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblManufacture)
                    .addComponent(jdcManufactureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdcExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreateExcel)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRefesh)
                            .addComponent(btnImport)))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void txtQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyReleased

        txtRemainingAmout.setText(txtQuantity.getText().trim());
    }//GEN-LAST:event_txtQuantityKeyReleased

    private void rdoFalsePreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoFalsePreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoFalsePreActionPerformed

    private void tblWarehouseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblWarehouseMouseClicked
        // TODO add your handling code here:
        String BatchID = tblWarehouse.getValueAt(tblWarehouse.getSelectedRow(), 0).toString();
        Medicine mdc = new MedicineDAO().selectByBatchID(BatchID);
        WareHouse wh = new WareHouseDAO().selectByID(BatchID);
        TypeOfMedicine tom = new TypeOfMedicineDAO().selectByID(mdc.getMdcTypeOfMedicineID());
        setModelMedicine(mdc);
        setModelWareHouse(wh);
        setModelTOM(tom);
    }//GEN-LAST:event_tblWarehouseMouseClicked

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        if (new WareHouseDAO().isDuplicateWarehouseID(txtBatchID.getText())) {
            Mgsbox.error(this, "Batch ID is duplicated!");
        } else if (ValidateSupport.isNull(txtBatchID) || ValidateSupport.isNull(txtDistributor)
                || ValidateSupport.isNull(txtQuantity)
                || ValidateSupport.isNull(txtMedicineName)
                || ValidateSupport.isNull(txtUnit) || ValidateSupport.isNull(txtMedicineID)
                || ValidateSupport.isNull(txtPriceSale) || ValidateSupport.isNull(txtPrice)
                || ValidateSupport.isNull(txtRate) || ValidateSupport.isNull(txpMedicineConcen)
                || ValidateSupport.isNull(txpMedicineIngre) || ValidateSupport.isNull(txpUsermanual)) {
            Mgsbox.error(this, "Can not be blank!");
        } else if (!ValidateSupport.checkPrice(txtPriceSale)) {
            Mgsbox.error(this, "Please fill in the correct format Price!!!");
        } else if (!ValidateSupport.checkPrice(txtPrice)) {
            Mgsbox.error(this, "Please fill in the correct format PriceSale!!!");
        } else if (!ValidateSupport.checkPrice(txtRate)) {
            Mgsbox.error(this, "Please fill in the correct format Rate!!!");
        } else if (new MedicineDAO().selectByID(txtMedicineID.getText()) != null && cboMedicineID.getSelectedIndex() == 1) {
            Mgsbox.error(this, "Medicine ID already exist");
        } else if (isCheckHSD(jdcManufactureDate, jdcExpirationDate) && ValidateSupport.isNumber(txtQuantity)) {
            try {
                if (cboMedicineID.getSelectedItem().equals("Add new")) {
                    importWarehouse(getModelMedicine(), getModel());
                } else {
                    importWarehouse(new MedicineDAO().selectByID(cboMedicineID.getSelectedItem().toString().trim()), getModel());
                }
            } catch (Exception e) {
                Mgsbox.error(this, "Import medicine failed!!!");
                e.printStackTrace();
            }
        }else{
            Mgsbox.error(this, "This product is out of date!");
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnRefeshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefeshActionPerformed
        tblWarehouse.clearSelection();
        clearFormTOM();
        clearFormBatch();
        clearFormMedicine();
        loadDataToTable();
        loadComboboxTypeOfMedicine();
        loadComboboxNameOfTOM();
        editableFormMedicine(false);
        cboMedicineID.removeAllItems();
    }//GEN-LAST:event_btnRefeshActionPerformed

    private void cboNameOfTOMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboNameOfTOMMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_cboNameOfTOMMouseClicked

    private void btnChangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            btnChange.setToolTipText("Cick 2 for change Background");
            setBackground(Color.decode("#9badf2"));
            Controller.Helper.BackgroundC1.ChangeTxt(txtBatchID);
            Controller.Helper.BackgroundC1.ChangeTxt(txtDistributor);
            Controller.Helper.BackgroundC1.ChangeTxt(txtMedicineID);
            Controller.Helper.BackgroundC1.ChangeTxt(txtPriceSale);
            Controller.Helper.BackgroundC1.ChangeTxt(txtRate);
            Controller.Helper.BackgroundC1.ChangeTxtPane(txpUsermanual);
            Controller.Helper.BackgroundC1.ChangeTxt(txtMedicineName);
            Controller.Helper.BackgroundC1.ChangeTxt(txtPrice);
            Controller.Helper.BackgroundC1.ChangeTxt(txtQuantity);
            Controller.Helper.BackgroundC1.ChangeTxt(txtRemainingAmout);
            Controller.Helper.BackgroundC1.ChangeTxt(txtUnit);
            Controller.Helper.BackgroundC1.ChangeTxt(txtSearch);
            Controller.Helper.BackgroundC1.ChangeTxtPane(txpMedicineConcen);
            Controller.Helper.BackgroundC1.ChangeTxtPane(txpBatchNote);
            Controller.Helper.BackgroundC1.ChangeTxtPane(txpMedicineIngre);
            Controller.Helper.BackgroundC1.ChangeRdo(rdoFalsePre);
            Controller.Helper.BackgroundC1.ChangeRdo(rdoTruePre);
            Controller.Helper.BackgroundC1.ChangeBtn(btnChange);
        } else if (evt.getClickCount() == 2) {
            btnChange.setToolTipText("Cick 1 for change Background");
            setBackground(Color.white);
            Controller.Helper.BackgroundC2.ChangeTxt(txtBatchID);
            Controller.Helper.BackgroundC2.ChangeTxt(txtDistributor);
            Controller.Helper.BackgroundC2.ChangeTxt(txtMedicineName);
            Controller.Helper.BackgroundC2.ChangeTxt(txtMedicineID);
            Controller.Helper.BackgroundC2.ChangeTxt(txtPriceSale);
            Controller.Helper.BackgroundC2.ChangeTxt(txtRate);
            Controller.Helper.BackgroundC2.ChangeTxtPane(txpUsermanual);
            Controller.Helper.BackgroundC2.ChangeTxt(txtPrice);
            Controller.Helper.BackgroundC2.ChangeTxt(txtQuantity);
            Controller.Helper.BackgroundC2.ChangeTxt(txtRemainingAmout);
            Controller.Helper.BackgroundC2.ChangeTxt(txtUnit);
            Controller.Helper.BackgroundC2.ChangeTxt(txtSearch);
            Controller.Helper.BackgroundC2.ChangeTxtPane(txpMedicineConcen);
            Controller.Helper.BackgroundC2.ChangeTxtPane(txpBatchNote);
            Controller.Helper.BackgroundC2.ChangeTxtPane(txpMedicineIngre);
            Controller.Helper.BackgroundC2.ChangeRdo(rdoFalsePre);
            Controller.Helper.BackgroundC2.ChangeRdo(rdoTruePre);
            Controller.Helper.BackgroundC2.ChangeBtn(btnChange);
        }
    }//GEN-LAST:event_btnChangeMouseClicked

    private void txtMedicineIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedicineIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedicineIDActionPerformed

    private void txtPriceSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceSaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceSaleActionPerformed

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
        clearFormMedicine();
    }//GEN-LAST:event_jLabel7MouseClicked

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
        search(txtSearch.getText());
    }//GEN-LAST:event_txtSearchKeyPressed

    private void lblImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseClicked
        // TODO add your handling code here:
        selectImage();
    }//GEN-LAST:event_lblImageMouseClicked

    private void txtPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyReleased
        countPriceSale(Double.parseDouble(txtRate.getText().isEmpty() ? "0" : txtRate.getText())
                , Double.parseDouble(txtPrice.getText().isEmpty() ? "0" : txtPrice.getText()));
    }//GEN-LAST:event_txtPriceKeyReleased

    private void txtRateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRateKeyReleased
        countPriceSale(Double.parseDouble(txtRate.getText().isEmpty() ? "0" : txtRate.getText())
                , Double.parseDouble(txtPrice.getText().isEmpty() ? "0" : txtPrice.getText()));
    }//GEN-LAST:event_txtRateKeyReleased

    private void btnCreateExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateExcelActionPerformed
        // TODO add your handling code here:
        CreateExcel.ExportToExcel(tblWarehouse, "WareHouse");
    }//GEN-LAST:event_btnCreateExcelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnCreateExcel;
    private javax.swing.ButtonGroup btnGroupPrescription;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnRefesh;
    private javax.swing.JComboBox<String> cboMedicineID;
    private javax.swing.JComboBox<String> cboNameOfTOM;
    private javax.swing.JComboBox<String> cboProducer;
    private javax.swing.JComboBox<String> cboTypeOfMedicineID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator9;
    private com.toedter.calendar.JDateChooser jdcDateImport;
    private com.toedter.calendar.JDateChooser jdcExpirationDate;
    private com.toedter.calendar.JDateChooser jdcManufactureDate;
    private javax.swing.JLabel lblBatchID;
    private javax.swing.JLabel lblDateImport;
    private javax.swing.JLabel lblDistributor;
    private javax.swing.JLabel lblExpirationDate;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblManufacture;
    private javax.swing.JLabel lblMedicineConcen;
    private javax.swing.JLabel lblMedicineID;
    private javax.swing.JLabel lblMedicineIngre;
    private javax.swing.JLabel lblMedicineName;
    private javax.swing.JLabel lblNameOfTOM;
    private javax.swing.JLabel lblOk;
    private javax.swing.JLabel lblPrecription;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProducerID;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblRemainingAmout;
    private javax.swing.JLabel lblTypeOfMedicineID;
    private javax.swing.JLabel lblUnit;
    private javax.swing.JRadioButton rdoFalsePre;
    private javax.swing.JRadioButton rdoTruePre;
    private javax.swing.JTable tblWarehouse;
    private javax.swing.JTextPane txpBatchNote;
    private javax.swing.JTextPane txpMedicineConcen;
    private javax.swing.JTextPane txpMedicineIngre;
    private javax.swing.JTextPane txpUsermanual;
    private javax.swing.JTextField txtBatchID;
    private GUI.TextField txtDistributor;
    private GUI.TextField txtMedicineID;
    private GUI.TextField txtMedicineName;
    private GUI.TextField txtPrice;
    private GUI.TextField txtPriceSale;
    private javax.swing.JTextField txtQuantity;
    private GUI.TextField txtRate;
    private javax.swing.JTextField txtRemainingAmout;
    private GUI.TextField txtSearch;
    private GUI.TextField txtUnit;
    // End of variables declaration//GEN-END:variables
    private void EditTable(JTable a) {
        a.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        a.getTableHeader().setOpaque(false);
        a.getTableHeader().setBackground(new Color(32, 136, 203));
        a.getTableHeader().setForeground(new Color(255, 255, 255));
        a.setRowHeight(25);
    }

    WareHouseDAO wdao = new WareHouseDAO();
    
    private void countPriceSale(double rate, double priceImport){
        txtPriceSale.setText(priceImport+ (rate * priceImport)+"");
    }

    public void importWarehouse(Medicine mdc, WareHouse wh) {
        new WareHouseDAO().insert(wh);
        mdc.setMdcBatchID(wh.getWhBatchID());
        new MedicineDAO().insert(mdc);
        clearFormBatch();
        clearFormMedicine();
        clearFormTOM();
        lblOk.setVisible(false);
        editableFormMedicine(false);
        Mgsbox.alert(this, "Import medicine successfully...");
        loadDataToTable();
    }

    private void loadDataToTable() {
        DefaultTableModel model = (DefaultTableModel) tblWarehouse.getModel();
        model.setRowCount(0);
        try {
            List<WareHouse> wareHouse = wdao.selectAll();
            for (WareHouse i : wareHouse) {
                Object[] row = {
                    i.getWhBatchID(),
                    i.getWhEmployeeID(),
                    i.getWhDistributor(),
                    i.getWhImportDay(),
                    i.getWhDateOfManufacture(),
                    i.getWhExpiryDate(),
                    i.getWhQuantity(),
                    i.getWhRemainingAmout(),
                    i.getWhNote()
                };
                model.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearFormTOM() {
        btnGroupPrescription.clearSelection();
    }

    private void clearFormBatch() {
        txtBatchID.setText("");
        txtDistributor.setText("");
        txtQuantity.setText("");
        txpBatchNote.setText("");
        txtRemainingAmout.setText("");
    }

    private void clearFormMedicine() {
        txtMedicineName.setText("");
        txtMedicineID.setText("");
        txpMedicineConcen.setText("");
        txpMedicineIngre.setText("");
        txtUnit.setText("");
        txtPrice.setText("");
        txtPriceSale.setText("");
        txtRate.setText("");
        txpUsermanual.setText("");
    }

    private void loadComboboxTypeOfMedicine() {
        DefaultComboBoxModel boxModel = (DefaultComboBoxModel) cboTypeOfMedicineID.getModel();
        boxModel.removeAllElements();
        boxModel.addElement("Please Choose");
        try {
            List<TypeOfMedicine> typeOfMedicines = new TypeOfMedicineDAO().selectAll();
            typeOfMedicines.forEach(typeOfMedicine -> {
                boxModel.addElement(typeOfMedicine.getTomID());
            });
        } catch (Exception e) {
            e.printStackTrace();
        }

        cboTypeOfMedicineID.addItemListener((ItemEvent event) -> {
            if (event.getStateChange() == ItemEvent.SELECTED) {
                if (cboTypeOfMedicineID.getSelectedIndex() != 0) {
                    String IDType = cboTypeOfMedicineID.getSelectedItem().toString();
                    loadComboboxMedicineID(IDType);
                    TypeOfMedicine ofTMedicine = new TypeOfMedicineDAO().selectByID(IDType);
                    setModelTOM(ofTMedicine);
                    clearFormBatch();
                    clearFormMedicine();
                } else {
                    //new MedicineTypeForm().setVisible(true);
                }

            }
        });
    }

    private void loadComboboxMedicineID(String TypeOfMedicineID) {
        DefaultComboBoxModel boxModelMecicine = (DefaultComboBoxModel) cboMedicineID.getModel();
        boxModelMecicine.removeAllElements();
        boxModelMecicine.addElement("Please Choose");
        boxModelMecicine.addElement("Add new");
        try {
            List<Medicine> medicines = new MedicineDAO().selectByTypeOfMedicineID(TypeOfMedicineID);
            if (medicines != null) {
                medicines.forEach(medicine -> {
                    boxModelMecicine.addElement(medicine.getMdcID().trim());
                });
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        cboMedicineID.addItemListener((ItemEvent event) -> {
            if (event.getStateChange() == ItemEvent.SELECTED && cboMedicineID.getSelectedIndex() > 1) {
                String ID = cboMedicineID.getSelectedItem().toString();
                setModelMedicine(new MedicineDAO().selectByID(ID));
                editableFormMedicine(false);
            } else if(event.getStateChange() == ItemEvent.SELECTED && cboMedicineID.getSelectedIndex() == 1) {
                clearFormMedicine();
                txtPrice.setText("0");
                txtRate.setText("0");
                editableFormMedicine(true);
                lblOk.setVisible(false);
            }else{
                editableFormMedicine(false);
            }
        });
    }

    private void loadComboboxProducer() {
        DefaultComboBoxModel boxModel = (DefaultComboBoxModel) cboProducer.getModel();
        boxModel.removeAllElements();
        try {
            for (Producer pro : new ProducerDAO().selectAll()) {
                boxModel.addElement(pro.getPdcID());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadComboboxNameOfTOM() {
        DefaultComboBoxModel boxModel = (DefaultComboBoxModel) cboNameOfTOM.getModel();
        boxModel.removeAllElements();
        boxModel.addElement("..........");
        try {
            List<TypeOfMedicine> typeOfMedicines = new TypeOfMedicineDAO().selectAll();
            typeOfMedicines.forEach(typeOfMedicine -> {
                boxModel.addElement(typeOfMedicine.getTomName());
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
        cboNameOfTOM.addItemListener((ItemEvent event) -> {
            if (event.getStateChange() == ItemEvent.SELECTED && cboNameOfTOM.getSelectedIndex() != 0) {
                String Name = cboNameOfTOM.getSelectedItem().toString();
                setModelTOM(new TypeOfMedicineDAO().selectByName(Name));
            }
        });
    }

    private void setModelWareHouse(WareHouse wh) {
        txtBatchID.setText(wh.getWhBatchID());
        txtDistributor.setText(wh.getWhDistributor());
        txtQuantity.setText(wh.getWhQuantity() + "");
        txtRemainingAmout.setText(wh.getWhRemainingAmout() + "");
        txpUsermanual.setText(wh.getWhNote());
        jdcDateImport.setDate(wh.getWhImportDay());
        jdcExpirationDate.setDate(wh.getWhExpiryDate());
        jdcManufactureDate.setDate(wh.getWhDateOfManufacture());
    }

    private void setModelTOM(TypeOfMedicine ofTMedicine) {
        cboTypeOfMedicineID.setSelectedItem(ofTMedicine.getTomID());
        cboNameOfTOM.setSelectedItem(ofTMedicine.getTomName());
        rdoFalsePre.setSelected(ofTMedicine.isTomIsPrecription() ? false : true);
        rdoTruePre.setSelected(ofTMedicine.isTomIsPrecription());
    }

    private void setModelMedicine(Medicine ofMedicine) {
        txtMedicineID.setText(ofMedicine.getMdcID());
        txpUsermanual.setText(ofMedicine.getMdcUserManual());
        txtRate.setText(String.format("%.2f",ofMedicine.getMdcRate()));
        txtPriceSale.setText(ofMedicine.getMdcPriceSale() + "");
        lblImage.setToolTipText(ofMedicine.getMdcImage());
        cboMedicineID.setSelectedItem(ofMedicine.getMdcID());
        cboProducer.setSelectedItem(ofMedicine.getMdcProducerID());
        txtMedicineName.setText(ofMedicine.getMdcName());
        txpMedicineIngre.setText(ofMedicine.getMdcIngredient());
        txpMedicineConcen.setText(ofMedicine.getMdcConcentration());
        txtUnit.setText(ofMedicine.getMdcUnit());
        txtPrice.setText(ofMedicine.getMdcPriceImport() + "");
    }

    private WareHouse getModel() {
        WareHouse wh = new WareHouse();
        wh.setWhBatchID(txtBatchID.getText());
        wh.setWhEmployeeID(Image_Auth.USER.getEpeID());
        wh.setWhDistributor(txtDistributor.getText());
        wh.setWhImportDay(DateSupport.toDate(new SimpleDateFormat("yyyy-MM-dd").format(jdcDateImport.getDate())));
        wh.setWhDateOfManufacture(DateSupport.toDate(new SimpleDateFormat("yyyy-MM-dd").format(jdcManufactureDate.getDate())));
        wh.setWhExpiryDate(DateSupport.toDate(new SimpleDateFormat("yyyy-MM-dd").format(jdcExpirationDate.getDate())));
        wh.setWhQuantity(Integer.parseInt(txtQuantity.getText()));
        wh.setWhRemainingAmout(Integer.parseInt(txtRemainingAmout.getText()));
        wh.setWhNote(txpBatchNote.getText());
        return wh;
    }

    private Medicine getModelMedicine() {
        Medicine mdc = new Medicine();
        mdc.setMdcID(txtMedicineID.getText());
        mdc.setMdcTypeOfMedicineID(cboTypeOfMedicineID.getSelectedItem().toString());
        mdc.setMdcProducerID(cboProducer.getSelectedItem().toString());
        mdc.setMdcName(txtMedicineName.getText());
        mdc.setMdcIngredient(txpMedicineIngre.getText());
        mdc.setMdcConcentration(txpMedicineConcen.getText());
        mdc.setMdcUserManual(txpUsermanual.getText());
        mdc.setMdcPriceSale(Double.parseDouble(txtPriceSale.getText()));
        mdc.setMdcPriceImport(Double.parseDouble(txtPrice.getText()));
        mdc.setMdcRate(Double.parseDouble(txtRate.getText()));
        mdc.setMdcImage(lblImage.getToolTipText());
        mdc.setMdcUnit(txtUnit.getText());
        return mdc;
    }

    public boolean isCheckHSD(JDateChooser date, JDateChooser date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date.getDate());
        c2.setTime(date2.getDate());
        long a = (c2.getTime().getTime() - c1.getTime().getTime());
        if (a <= 0) {
            Mgsbox.error(date.getRootPane(), "Medicine has expired");
            return false;
        } else {
            return true;
        }
    }

    private void selectImage() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter excelExtensionFilter = new FileNameExtensionFilter("Image file", "png", "jpg");
        fileChooser.setFileFilter(excelExtensionFilter);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            lblImage.setToolTipText(file.getName());
            Image_Auth.saveImage(file);
            if(lblImage.getText()==null){
                lblOk.setVisible(false);
            }else{
                lblOk.setVisible(true);
            }
        }
    }

    private void editableFormMedicine(boolean a) {
        lblImage.setVisible(a);
        txtMedicineID.setVisible(a);
        cboProducer.setEnabled(a);
        txtMedicineName.setEditable(a);
        txtUnit.setEditable(a);
        txtRate.setEditable(a);
        txpMedicineConcen.setEditable(a);
        txpUsermanual.setEditable(a);
        txpMedicineConcen.setEditable(a);
        txpMedicineIngre.setEditable(a);
        txtPrice.setEditable(a);
        lblImage.setVisible(a);
    }

    private void search(String text) {
        DefaultTableModel model = (DefaultTableModel) tblWarehouse.getModel();
        TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>(model);
        tblWarehouse.setRowSorter(rowSorter);
        rowSorter.setRowFilter(RowFilter.regexFilter(text));
    }

}
